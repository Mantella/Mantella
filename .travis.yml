sudo: required
dist: trusty

language: cpp

os:
  - linux

compiler:
  - clang
  - gcc

env:
  global:
    # Encrypted COVERITY_SCAN_TOKEN
    - secure: "M4RswpLBKVbIfY2k6W9mNFoSvJRpWFtMd5ynuMwgaBoaDbwn449KVfWKIlFruHGDfa9E/rB+y2twY5KktJm+RcLP8jvJCrWITy3E30rZQHAIgI1oAdy6i7NdMXHJYFQZs/eSYKZsN3/dfmzvnghA2txCG35tSxyLyb0vJp95VzY="
  
install:
  # Prerequirements (including optional features)
  - sudo chmod a+x ./.setup.sh
  - ./.setup.sh
  ## Using coveralls to store and visualise the code coverage
  - gem install coveralls-lcov
  - sudo chmod a+x ./.code-checks.sh
  
addons:
  coverity_scan:
    project:
      name: "SebastianNiemann/Mantella"
    notification_email: niemann@sra.uni-hannover.de
    build_command_prepend: "cov-configure --compiler gcc-4.8 --template; cmake -DBUILD_TESTS=On"
    build_command: "make -j 4"
    branch_pattern: coverity_scan

script:
  # Test matrix
  ## GCC
  ## - Unit tests with OpenMP support
  ## - Code coverage
  ## - Installation
  - if [ "$CXX" == "g++" ]; then cmake -DBUILD_TESTS=On -DMEASURE_CODE_COVERAGE=On .; fi
  - if [ "$CXX" == "g++" ]; then make -j 4; fi
  - if [ "$CXX" == "g++" ]; then ./bin/mantellaTest ~[!shouldfail] ./test/data; fi
  - if [ "$CXX" == "g++" ]; then sudo make install; fi
  
  # Clang
  ## - Unit tests with MPI support
  ## - Code format
  ## - Include rules
  - if [ "$CXX" == "clang++" ]; then cmake -DBUILD_TESTS=On -DSUPPORT_MPI=On .; fi
  - if [ "$CXX" == "clang++" ]; then make -j 4; fi
  - if [ "$CXX" == "clang++" ]; then mpiexec -n 4 ./bin/mantellaTest ~[!shouldfail] ./test/data; fi
  - if [ "$CXX" == "clang++" ]; then ./.code-checks.sh format; fi
  - if [ "$CXX" == "clang++" ]; then ./.code-checks.sh include; fi
  
after_success:
  - if [ "$CXX" == "g++" ]; then cd ./CMakeFiles/mantella.dir/src/; fi
  - if [ "$CXX" == "g++" ]; then lcov --directory . --base-directory . --capture --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --remove coverage.info '/usr/*' --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --remove coverage.info '*.hpp' --output-file coverage.info; fi
  - if [ "$CXX" == "g++" ]; then lcov --list coverage.info; fi
  - if [ "$CXX" == "g++" ]; then coveralls-lcov coverage.info; fi
