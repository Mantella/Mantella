//------------------------------------------------------------------------------
// Licensed under the MIT License (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Main developers:
//   Sebastian Niemann <sebiniemann@gmail.com> (Maintainer)
//   Oskar Pusz <pusz@sra.uni-hannover.de> (Maintainer)
//   Daniel Kiechle
//   Wolff Bock von WÃ¼lfingen
//   Philipp Schiffmann
//------------------------------------------------------------------------------
#pragma once

#define MANTELLA_VERSION_MAJOR 0
#define MANTELLA_VERSION_MINOR 70
#define MANTELLA_VERSION_PATCH 0

#if !defined(MANTELLA_SYMBOL_VERSION)
  #define MANTELLA_SYMBOL_VERSION MANTELLA_VERSION_MAJOR
#endif

//
// Dependencies
//

// C++ standard library
#include <algorithm>
#include <array>
#include <cassert>
#include <chrono>
#include <cstdlib>
#include <functional>
#include <numeric>
#include <random>
#include <type_traits>
#include <utility>
#include <vector>

//
// Mantella
//

// IWYU pragma: begin_exports
namespace mant {
#if MANTELLA_SYMBOL_VERSION == MANTELLA_VERSION_MAJOR
  inline
#endif
  namespace v0 {
    // Random number generator
    // Provides global access to a one-time constructed random number generator.
    // *Note:* If *random_number_generator_type* was not thread-safe in the first place, it still wont be.
    inline std::mt19937_64& random_number_generator() {
      static std::mt19937_64 random_number_generator;
      return random_number_generator;
    }

    // Helper
    #include "mantella0_bits/helper/random_neighbour.hpp"
    #include "mantella0_bits/helper/learn.hpp"
    #include "mantella0_bits/helper/predict.hpp"

    // Problems
    #include "mantella0_bits/problem.hpp"
    #include "mantella0_bits/problem/ackley_function.hpp"
    #include "mantella0_bits/problem/rastrigin_function.hpp"
    #include "mantella0_bits/problem/rosenbrock_function.hpp"
    #include "mantella0_bits/problem/sphere_function.hpp"
    #include "mantella0_bits/problem/sum_of_different_powers.hpp"
    #include "mantella0_bits/evaluate.hpp"

    // Analyser
    #include "mantella0_bits/analyser/additive_separability.hpp"
    #include "mantella0_bits/analyse_result.hpp"
    #include "mantella0_bits/analyse.hpp"

    // Optimiser
    #include "mantella0_bits/optimise_result.hpp"
    #include "mantella0_bits/optimiser.hpp"
    #include "mantella0_bits/optimiser/hill_climbing.hpp"
    #include "mantella0_bits/optimiser/hooke_jeeves_algorithm.hpp"
    #include "mantella0_bits/optimiser/nelder_mead_method.hpp"
    #include "mantella0_bits/optimiser/particle_swarm_optimisation.hpp"
    #include "mantella0_bits/optimiser/random_search.hpp"
    #include "mantella0_bits/optimise.hpp"
  }
}
// IWYU pragma: end_exports
