//------------------------------------------------------------------------------
// Licensed under the MIT License (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Main developers:
//   Sebastian Niemann <sebiniemann@gmail.com> (Maintainer)
//   Oskar Pusz
//   Daniel Kiechle
//   Wolff Bock von WÃ¼lfingen
//   Philipp Schiffmann
//------------------------------------------------------------------------------
#pragma once

#define MANTELLA_VERSION_MAJOR 0
#define MANTELLA_VERSION_MINOR 50
#define MANTELLA_VERSION_PATCH 0

#if !defined(MANTELLA_SYMBOL_VERSION)
  #define MANTELLA_SYMBOL_VERSION MANTELLA_VERSION_MAJOR
#endif

//
// Configuration
//
// The maximal number of threads to be used by Mantella.
#if !defined(MANTELLA_MAXIMAL_NUMBER_OF_THREADS)
  #define MANTELLA_MAXIMAL_NUMBER_OF_THREADS 1
#endif

// The random number generator engine can manually be changed by defining `MANTELLA_RANDOM_NUMBER_GENERATOR` prior to including Mantella the first time.
#if !defined(MANTELLA_RANDOM_NUMBER_GENERATOR)
  #define MANTELLA_RANDOM_NUMBER_GENERATOR std::mt19937_64
#endif

//
// Dependencies
//
// C++ standard library
#include <algorithm>
#include <array>
#include <cassert>
#include <cstdlib>
#include <functional>
#include <initializer_list>
#include <iostream>
#include <iterator>
#include <random>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>

// BLAS
#include <cblas.h>

// LAPACK
#include <lapacke.h>

// MPI
#if defined(MANTELLA_SUPPORT_MPI)
#include <mpi.h> // IWYU pragma: keep
#endif

//
// Mantella
//
// IWYU pragma: begin_exports
namespace mant {
# if MANTELLA_SYMBOL_VERSION == MANTELLA_VERSION_MAJOR
  inline 
#endif
  namespace vMANTELLA_VERSION_MAJOR {
// Random number generator
typedef MANTELLA_RANDOM_NUMBER_GENERATOR random_number_generator_t;
#include "mantella0_bits/random_number_generator.hpp"

// Assertions
// #include "mantella0_bits/assertion/is_permutation_vector.hpp"
// #include "mantella0_bits/assertion/is_rotation_matrix.hpp"

// Mathematical functions
//// Algebra
// #include "mantella0_bits/algebra/polynomial_size.hpp"
// #include "mantella0_bits/algebra/polynomial.hpp"
//// Combinatorics
// #include "mantella0_bits/combinatorics/factorial.hpp"
// #include "mantella0_bits/combinatorics/n_choose_k.hpp"
// #include "mantella0_bits/combinatorics/second_stirling_number.hpp"
// #include "mantella0_bits/combinatorics/multicombinations.hpp"
// #include "mantella0_bits/combinatorics/two_sets_partitions.hpp"
//// Linear algebra
// #include "mantella0_bits/linear_algebra/qr_decomposition.hpp"
//// Number theory
//// Probability
// #include "mantella0_bits/probability/random_permutation_vector.hpp"
// #include "mantella0_bits/probability/random_rotation_matrix.hpp"
// #include "mantella0_bits/probability/random_neighbour.hpp"

// Optimisation problems
// #include "mantella0_bits/optimisation_problem.hpp"
// #include "mantella0_bits/optimisation_problem/ackley_function.hpp"
// #include "mantella0_bits/optimisation_problem/different_powers_function.hpp"
// #include "mantella0_bits/optimisation_problem/linear_slope.hpp"
// #include "mantella0_bits/optimisation_problem/rastrigin_function.hpp"
// #include "mantella0_bits/optimisation_problem/rosenbrock_function.hpp"
// #include "mantella0_bits/optimisation_problem/sphere_function.hpp"
//// Properties analysis
// #include "mantella0_bits/properties_analysis/additive_separability.hpp"

// Optimisation algorithms
// #include "mantella0_bits/optimisation_algorithm.hpp"
// #include "mantella0_bits/optimisation_algorithm/van_der_corput_sequence.hpp"
// #include "mantella0_bits/optimisation_algorithm/halton_sequence.hpp"
// #include "mantella0_bits/optimisation_algorithm/hammersley_set.hpp"
//// Samples selection
// #include "mantella0_bits/samples_selection/elitists.hpp"

// Optimisation procedures
// #include "mantella0_bits/evaluate.hpp"
// #include "mantella0_bits/optimise.hpp"
// #include "mantella0_bits/analyse.hpp"
  }
}
// IWYU pragma: end_exports
