//------------------------------------------------------------------------------
// Licensed under the MIT License (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://opensource.org/licenses/MIT
//
// Main developers:
//   Sebastian Niemann <sebiniemann@gmail.com> (Maintainer)
//   Daniel Kiechle
//   Wolff Bock von WÃ¼lfingen
//   Philipp Schiffmann
//   Oskar Pusz
//------------------------------------------------------------------------------
#pragma once

#define MANTELLA_VERSION_MAJOR 0
#define MANTELLA_VERSION_MINOR 50
#define MANTELLA_VERSION_PATCH 0

#if !defined(MANTELLA_SYMBOL_VERSION)
  #define MANTELLA_SYMBOL_VERSION MANTELLA_VERSION_MAJOR
#endif

//
// Configuration
//
// The random number generator engine to be used by Mantella
#if !defined(MANTELLA_RANDOM_NUMBER_GENERATOR)
  #define MANTELLA_RANDOM_NUMBER_GENERATOR std::mt19937_64
#endif

//
// Dependencies
//
// C++ standard library
#include <algorithm>
#include <array>
#include <cassert>
#include <cstdlib>
#include <functional>
#include <random>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>

//
// Mantella
//
// IWYU pragma: begin_exports
namespace mant {
#if MANTELLA_SYMBOL_VERSION == MANTELLA_VERSION_MAJOR
  inline 
#endif
  namespace v0 {
    // Random number generator
    typedef MANTELLA_RANDOM_NUMBER_GENERATOR random_number_generator_type;
    // Provides global access to a one-time constructed random number generator.
    // *Note:* If *random_number_generator_type* was not thread-safe in the first place, it still wont be.
    inline random_number_generator_type& random_number_generator() {
      static random_number_generator_type random_number_generator;
      return random_number_generator;
    }
    
    // Mathematical functions
    //// Randomisation
    #include "mantella0_bits/randomisation/random_neighbour.hpp"

    // Optimisation problems
    #include "mantella0_bits/optimisation_problem.hpp"
    #include "mantella0_bits/optimisation_problem/ackley_function.hpp"
    #include "mantella0_bits/optimisation_problem/rastrigin_function.hpp"
    #include "mantella0_bits/optimisation_problem/rosenbrock_function.hpp"
    #include "mantella0_bits/optimisation_problem/sphere_function.hpp"
    #include "mantella0_bits/optimisation_problem/sum_of_different_powers_function.hpp"
    #include "mantella0_bits/evaluate.hpp"

    // Properties analysis
    #include "mantella0_bits/property_analysis/additive_separability.hpp"
    #include "mantella0_bits/analyse.hpp"

    // Optimisation algorithms
    #include "mantella0_bits/optimisation_algorithm.hpp"
    #include "mantella0_bits/optimisation_algorithm/hill_climbing.hpp"
    #include "mantella0_bits/optimisation_algorithm/hooke_jeeves_algorithm.hpp"
    #include "mantella0_bits/optimisation_algorithm/particle_swarm_optimisation.hpp"
    #include "mantella0_bits/optimisation_algorithm/random_search.hpp"
    #include "mantella0_bits/optimise.hpp"
  }
}
// IWYU pragma: end_exports
