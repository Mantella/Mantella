// C++ standard library
#include <cmath>
#include <iostream>

// Catch
#include <catch.hpp>
#include "catchHelper.hpp"

SCENARIO("Kriging.predict", "[Kriging][Kriging.predict]") {
  GIVEN("A kriging model trained on known test data") {
    WHEN("It predicts a selected known parameter") {
      THEN("The expected result is returned") {
        // Test data taken from the [DACE](http://www2.imm.dtu.dk/projects/dace/) matlab kriging toolbox
        const std::unordered_map<arma::vec, double, mant::Hash, mant::IsEqual> samples = {
          {{0.7, 59.6}, 34.1},
          {{2.1, 82.7}, 42.2},
          {{4.7, 75.09999999999999}, 39.5},
          {{4.8, 52.8}, 34.3},
          {{5.9, 67.09999999999999}, 37},
          {{6, 35.7}, 35.9},
          {{6.4, 33.7}, 36.4},
          {{7, 46.7}, 34.6},
          {{8.199999999999999, 40.1}, 35.4},
          {{13.3, 0.6}, 44.7},
          {{13.3, 68.2}, 37.8},
          {{13.4, 31.3}, 37.8},
          {{17.8, 6.9}, 43.9},
          {{20.1, 66.3}, 37.7},
          {{22.7, 87.59999999999999}, 42.8},
          {{23, 93.90000000000001}, 43.6},
          {{24.3, 73}, 39.3},
          {{24.8, 15.1}, 42.3},
          {{24.8, 26.3}, 39.7},
          {{26.4, 58}, 36.9},
          {{26.9, 65}, 37.8},
          {{27.7, 83.3}, 41.8},
          {{27.9, 90.8}, 43.3},
          {{29.1, 47.9}, 36.7},
          {{29.5, 89.40000000000001}, 43},
          {{30.1, 6.1}, 43.6},
          {{30.8, 12.1}, 42.8},
          {{32.7, 40.2}, 37.5},
          {{34.8, 8.1}, 43.3},
          {{35.3, 32}, 38.8},
          {{37, 70.3}, 39.2},
          {{38.2, 77.90000000000001}, 40.7},
          {{38.9, 23.3}, 40.5},
          {{39.4, 82.5}, 41.4},
          {{43, 4.7}, 43.3},
          {{43.7, 7.6}, 43.1},
          {{46.4, 84.09999999999999}, 41.5},
          {{46.7, 10.6}, 42.6},
          {{49.9, 22.1}, 40.7},
          {{51, 88.8}, 42},
          {{52.8, 68.90000000000001}, 39.3},
          {{52.9, 32.7}, 39.2},
          {{55.5, 92.90000000000001}, 42.2},
          {{56, 1.6}, 42.7},
          {{60.6, 75.2}, 40.1},
          {{62.1, 26.6}, 40.1},
          {{63, 12.7}, 41.8},
          {{69, 75.59999999999999}, 40.1},
          {{70.5, 83.7}, 40.9},
          {{70.90000000000001, 11}, 41.7},
          {{71.5, 29.5}, 40.8},
          {{78.09999999999999, 45.5}, 38.7},
          {{78.2, 9.1}, 41.7},
          {{78.40000000000001, 20}, 40.8},
          {{80.5, 55.9}, 38.7},
          {{81.09999999999999, 51}, 38.6},
          {{83.8, 7.9}, 41.6},
          {{84.5, 11}, 41.5},
          {{85.2, 67.3}, 39.4},
          {{85.5, 73}, 39.8},
          {{86.7, 70.40000000000001}, 39.6},
          {{87.2, 55.7}, 38.8},
          {{88.09999999999999, 0}, 41.6},
          {{88.40000000000001, 12.1}, 41.3},
          {{88.40000000000001, 99.59999999999999}, 41.2},
          {{88.8, 82.90000000000001}, 40.5},
          {{88.90000000000001, 6.2}, 41.5},
          {{90.59999999999999, 7}, 41.5},
          {{90.7, 49.6}, 38.9},
          {{91.5, 55.4}, 39},
          {{92.90000000000001, 46.8}, 39.1},
          {{93.40000000000001, 70.90000000000001}, 39.7},
          {{94.8, 71.5}, 39.7},
          {{96.2, 84.3}, 40.3},
          {{98.2, 58.2}, 39.5}
        };
        // Use gaussian correlation function with theta = (10, 10)
        std::function<double(const arma::vec&)> correlation = [](const arma::vec& x) {
          return exp(-10 * x(0) * x(0)) * exp(-10 * x(1) * x(1));
        };

        mant::Kriging kriging(correlation);
        kriging.setHighestDegree(0);
        kriging.train(samples);

        arma::mat predictions(100, 100);
        for (int i = 0; i < predictions.n_rows; i++) {
          for (int j = 0; j < predictions.n_cols; j++) {
            predictions(i, j) = kriging.predict({static_cast<double>(i), static_cast<double>(j)});
          }
        }
        std::cout << predictions << std::endl;
      }
    }
  }
}
